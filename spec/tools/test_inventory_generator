#!/usr/bin/env ruby

require "json"
require "pathname"

require "topological_inventory/ingress_api/client"
include TopologicalInventory::IngressApi::Client

module TopologicalInventory
  module TestInventoryGenerator
    def self.run
      test_inventory_dir = Pathname.new(__dir__).join("..", "orderer", "test_inventory")

      container_project = ContainerProject.new(
        :source_ref        => "c56c6854-baaf-11e8-ba7e-d094660d31fb",
        :name              => "default",
        :display_name      => "Default",
        :resource_version  => "42001363",
      )

      container_node = ContainerNode.new(
        :source_ref        => "b1bb5472-675d-4939-89b4-00a016fc0556",
        :name              => "node",
        :cpus              => 4,
        :memory            => 17179869184,
        :resource_version  => "25007341",
      )

      simple_inventory = Inventory.new(
        :name        => "OCP",
        :source      => "9a874712-9a55-49ab-a46a-c823acc35503",
        :schema      => Schema.new(:name => "Default"),
        :collections => [
          InventoryCollection.new(
            :name => :container_projects,
            :data => [container_project]
          ),
        ]
      )

      File.write(File.join(test_inventory_dir, "simple_inventory.json"), JSON.dump(simple_inventory.to_hash))

      relationships_inventory = Inventory.new(
        :name        => "OCP",
        :source      => "9a874712-9a55-49ab-a46a-c823acc35503",
        :schema      => Schema.new(:name => "Default"),
        :collections => [
          InventoryCollection.new(
            :name => :container_projects,
            :data => [container_project],
          ),
          InventoryCollection.new(
            :name => :container_nodes,
            :data => [container_node],
          ),
          InventoryCollection.new(
            :name => :container_groups,
            :data => [
              ContainerGroup.new(
                :source_ref        => "a40e2927-77b8-487e-92bb-63f32989b015",
                :name              => "kafka-1-hqtjh",
                :resource_version  => "1432020",
                :container_project => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_projects,
                  :reference                 => {:name => container_project.name},
                  :ref                       => :by_name,
                ),
                :container_node    => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_nodes,
                  :reference                 => {:name => container_node.name},
                  :ref                       => :by_name,
                )
              )
            ]
          ),
          InventoryCollection.new(
            :name => :container_images,
            :data => [
              ContainerImage.new(
                :source_ref => '50ab1222-b018-4f74-859f-83fae027e2ec',
              )
            ]
          ),
          InventoryCollection.new(
            :name => :containers,
            :data => [
              Container.new(
                :container_group => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_groups,
                  :reference                 => {:source_ref => "a40e2927-77b8-487e-92bb-63f32989b015"},
                  :ref                       => :manager_ref
                ),
                :container_image => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_images,
                  :reference                 => {:source_ref => "50ab1222-b018-4f74-859f-83fae027e2ec"},
                  :ref                       => :manager_ref
                ),
                :name => "kafka",
                :cpu_limit => nil,
                :cpu_request => 0.1,
                :memory_limit => nil,
                :memory_request => 536870912,
              ),
              Container.new(
                :container_group => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_groups,
                  :reference                 => {:source_ref => "a40e2927-77b8-487e-92bb-63f32989b015"},
                  :ref                       => :manager_ref
                ),
                :container_image => InventoryObjectLazy.new(
                  :inventory_collection_name => :container_images,
                  :reference                 => {:source_ref => "50ab1222-b018-4f74-859f-83fae027e2ec"},
                  :ref                       => :manager_ref
                ),
                :name => "zookeeper",
                :cpu_limit => nil,
                :cpu_request => nil,
                :memory_limit => nil,
                :memory_request => nil,
              ),
            ],
          ),
        ]
      )

      File.write(File.join(test_inventory_dir, "relationships_inventory.json"), JSON.dump(relationships_inventory.to_hash))

      container_node_xref = container_node.dup
      container_node_xref.lives_on = InventoryObjectLazy.new(
        :inventory_collection_name => :cross_link_vms,
        :reference                 => {:uid_ems => "6fd5b322-e333-4bb7-bf70-b74bdf13d4c6"},
        :ref                       => :manager_ref,
      )

      relationships_inventory = Inventory.new(
        :name        => "OCP",
        :source      => "9a874712-9a55-49ab-a46a-c823acc35503",
        :schema      => Schema.new(:name => "Default"),
        :collections => [
          InventoryCollection.new(
            :name => :container_nodes,
            :data => [container_node_xref],
          ),
        ]
      )

      File.write(File.join(test_inventory_dir, "cross_ref_inventory.json"), JSON.dump(relationships_inventory.to_hash))
    end
  end
end

TopologicalInventory::TestInventoryGenerator.run if __FILE__ == $PROGRAM_NAME
